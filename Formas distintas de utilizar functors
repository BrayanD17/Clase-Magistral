(define (sumar-elementos lista)
 (foldl + 0 lista))
(displayln (sumar-elementos '(1 2 3 4 5)))
; Output: 15

(define (filtrar-pares functor)
  (filter even? functor))
(define datos '(1 2 3 4 5))
(displayln (filtrar-pares datos))
; Output: '(2 4)


(define (fold-map func lst)
  (foldl + 0 (map func lst)))
(define datos '(1 2 3 4 5))
(define (cuadrado x)
  (* x x))
(define suma-cuadrados (fold-map cuadrado datos))
(displayln suma-cuadrados)
; Output: 55


(define-struct functor (data))
(define datos (make-functor '(1 2 3 4 5)))
(define datos2 (make-functor '(10 20 30 40 50)))
(define datos3 (make-functor '(1 1 1 1 1)))
(define (sumar-funtores functor1 functor2 functor3)
  (make-functor (map + (functor-data functor1) (functor-data functor2) (functor-data functor3))))
(define resultado (sumar-funtores datos datos2 datos3))
(displayln (functor-data resultado))
; Output: '(11 22 33 44 55)
